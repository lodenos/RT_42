#ifndef LIB_RT_CL_HL
#define LIB_RT_CL_HL

#define CONE        1
#define CYLINDER    2
#define PLAN        3
#define SPHERE      4
#define TORUS       5

#pragma OPENCL EXTENSION cl_khr_byte_addressable_store : enable

typedef struct      s_cam       /* Camera                   */
{
    float           fov;        /* FOV                      */
    size_t          h;          /* Resolution screen view x */
    float3          pos;        /* Position canera          */
    float3          rotate;     /* Angle of rotation        */
    float3          view;       /* Positon view scren {0, 0}*/
    size_t          w;          /* Resolution screen view y */
}                   t_cam;

typedef struct      s_ray       /* Ray                      */
{
    float3          a;          /* Point Start              */
    float3          b;          /* Point reach              */
    size_t          max;        /* Maximun reflexion        */
    unsigned int    color;       /* Calor of the ray         */
}                   t_ray;

typedef struct      s_obj       /* Object                   */
{
    float           angle;      /* Angle                    */
    float3          collision;  /* Point collision ray      */
    float           det;        /* Determinant matrice      */
    char            end;        /* 1 -> next ; 0 -x end     */
    size_t          id;         /* Id Group                 */
    float3          normal;     /* Vector Normal            */
    float3          pos;        /* Position Object          */
    float           radius;     /* radius of the object     */
    unsigned int    color;      /* Calors of the object     */
    float3          rotate;     /* Angle of rotation        */
    size_t          type;       /* Type Object              */
}                   t_obj;

typedef struct      s_spt       /**/
{
    float           ambient;    /**/
    float           diffuse;    /**/
    char            end;        /**/
    size_t          id;         /**/
    float           light;      /**/
    float3          pos;        /**/
    unsigned int    color;      /**/
    float           specular;   /**/
}                   t_spt;

typedef struct      s_scn
{
    struct s_rgba   *c_diff;    /* Struct *color diffuse    */
    struct s_cam    cam;        /* Struct camera            */
    size_t          n_obj;      /* Number object            */
    size_t          n_spt;      /* Number spotlight         */
    struct s_obj    *obj;       /* Struct Object            */
    struct s_spt    *spt;       /* Struct Spotlight         */
}                   t_scn;

void                camera(t_cam cam, t_ray *ray, size_t x, size_t y);

void                light(__global t_scn *scn, t_ray *ray, __global t_rgba *c_diff,
                        size_t id);
unsigned char       limit_rgba(float x);


t_ray               diffused_light(t_ray ray, __global t_spt *spt,
                            t_obj obj);


float               check_object(constant t_obj *obj, t_ray *ray, size_t *id);
float               cone(constant t_obj *obj, t_ray ray);
float               run_object(constant t_obj *obj, t_ray ray);



#endif
